""" common
" enable file number display
set nu
" disable compatible
set nocompatible
" disable highlight search
set nohlsearch

" tab setting
set tabstop=2 "set tab display width
set expandtab "use space to replace tab
set shiftwidth=2 "set the autoindent width
set softtabstop=2

set backspace=2


" key (: previous tap
" key ): next tap
nnoremap ( :tabp <cr>
nnoremap ) :tabn <cr>

""" pluggins
call plug#begin('~/.vim/plugged')

" browse file directory in tree view.
Plug 'preservim/nerdtree'

" customize tab name
Plug 'gcmt/taboo.vim'

" tabline
Plug 'vim-airline/vim-airline'

" nerdcommenter
Plug 'preservim/nerdcommenter'

" fuzzy finder.
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

" Use release branch (Recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" quickly switch between source and header.
Plug 'vim-scripts/a.vim'

" vim format
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'

" theme
Plug 'morhetz/gruvbox'
Plug 'tomasr/molokai'
" Plug 'sonph/onehalf', {'rtp': 'vim/'}
Plug 'dracula/vim', { 'as': 'dracula' }

" markdown
Plug 'skanehira/preview-markdown.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'plasticboy/vim-markdown'

" latex
Plug 'lervag/vimtex'

call plug#end()


""" nerdtree
" key Ctrl-n: Toggle nerdtree
" key \n: find in nerdtree
map <C-n> :NERDTreeToggle<CR>
map ,n :NERDTreeFind<CR>
" close nerdtree after open a file.
let NERDTreeQuitOnOpen=3


""" taboo.vim
let g:taboo_tab_format=" %N %f%m "


""" fzf.vim
" key Ctrl-p: search files
nnoremap <silent> <C-p> :Files<CR>
" key Ctrl-l: search buffers
nnoremap <silent> <C-l> :Buffers<CR>
nnoremap <silent> <C-h> :History<CR>
nnoremap <silent> <C-m> :BLines<CR>
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
let g:fzf_buffers_jump = 1
let g:fzf_action = {
  \ 'ctrl-t': 'tab drop',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }


""" coc.vim
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
" key C-space: trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" GoTo code navigation.
" key gd: go to definition
" key gy: go to type definition
" key gi: to to implementation
" key gr: go to references
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
" key \rn: rename symbol
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


""" a.vim
" key \a: quickly open header/source in current window
" key \va: quickly open header/source in vertical window
" key \sa: quickly open header/source in vertical window
nnoremap <silent> <leader>a :A<CR>
nnoremap <silent> <leader>va :AV<CR>
nnoremap <silent> <leader>sa :AS<CR>


""" vim-codefmt
nnoremap <silent> <leader>f :FormatCode<CR>


""" theme
" grubox
" colorscheme gruvbox
syntax on
colorscheme dracula

" vim-markdown
let g:vim_markdown_folding_disabled = 1

" markdown-preview.nvim
let g:mkdp_open_to_the_world = 1
let g:mkdp_echo_preview_url = 1
let g:mkdp_refresh_slow = 1
